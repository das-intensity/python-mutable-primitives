#!/usr/bin/env python
''' Generate mutable type code '''
import sys


MATH_FUNCTIONS = [
        ('add', '+'),
        ('sub', '-'),
        ('mul', '*'),
        # Division is handled differently in python2 and python3
        # We'll substitue the python3 options lower
        ('div', '/'),
        ]

MATH_CODE = {
        '': 'return self.val {} other',
        'r': 'return other {} self.val',
        'i': 'self.val {}= other;return self',
        }

mut_types = {
        'bool': {
            'numeric': False,
            },
        'int': {
            'numeric': True,
            },
        'float': {
            'numeric': True,
            },
        }


for prim, info in mut_types.items():
    fname = 'mutable_primitives/{}.py'.format(prim)
    cname = prim[0].upper() + prim[1:]
    numeric = info['numeric']

    header = [
            "''' {} - A mutable {} class".format(cname, prim),
            "",
            "##################################################",
            "###### AUTOGENERATED - DO NOT EDIT DIRECTLY ######",
            "##################################################",
            "'''"
            ]

    imports = [
            "\nimport sys" if numeric else "",
            "from mutable_primitives.base import Mutable",
            "",
            "",
            ]

    def cls_func(defline, code):
        code = ['    {}'.format(x) for x in code]
        return [""] + ['    {}'.format(x) for x in [defline] + code]

    cls_code = [
            "class {}(Mutable):".format(cname),
            "    ''' {} - A mutable {} class '''".format(cname, prim),
            "    base = {}".format(prim),
            ]

    cls_code.extend(cls_func("def __init__(self, val):", [
        "super({}, self).__init__(val, self.base) #pylint: disable=super-with-arguments".format(cname),
        "self.val = val",
        ]))

    cls_code.extend(cls_func("def get(self):", [
        "''' get raw (primitive) value '''",
        "return self.val",
        ]))

    cls_code.extend(cls_func("def set(self, val):", [
        "''' set raw (primitive) value '''",
        "assert isinstance(val, self.base)",
        "self.val = val",
        ]))

    cls_code.extend(cls_func("def __eq__(self, other):", [
        "return self.val == other",
        ]))

    cls_code.extend(cls_func("def __ne__(self, other):", [
        "return self.val != other",
        ]))

    cls_code.extend(cls_func("def __str__(self):", [
        "return '{}({})'.format(self.__class__.__name__, self.val)",
        ]))

    cls_code.extend(cls_func("def __repr__(self):", [
        "return '{}({})'.format(self.__class__.__name__, self.val)",
        ]))

    if info['numeric']:
        for mtype, basecode in MATH_CODE.items():
            for basename, op in MATH_FUNCTIONS:
                if basename  == 'div':
                    def indent(code):
                        if code:
                            return '    ' + code
                        return ''
                    # python2 div
                    cls_code.extend(["", "    if sys.version_info[0] < 3:"])
                    divcode = cls_func("def __{}{}__(self, other):".format(mtype, 'div'), [] + basecode.format('/').split(';'))
                    cls_code.extend([indent(x) for x in divcode][1:])

                    # python2 floordiv and truediv
                    cls_code.extend(["    else:"])
                    divcode = cls_func("def __{}{}__(self, other):".format(mtype, 'floordiv'), [] + basecode.format('//').split(';'))
                    cls_code.extend([indent(x) for x in divcode][1:])

                    divcode = cls_func("def __{}{}__(self, other):".format(mtype, 'truediv'), [] + basecode.format('/').split(';'))
                    cls_code.extend([indent(x) for x in divcode])
                    #('div', '/'),
                    #('floordiv', '//'),
                    #('truediv', '/'),
                else:
                    cls_code.extend(cls_func("def __{}{}__(self, other):".format(mtype, basename), [] + basecode.format(op).split(';')))

    open(fname, 'w+').write('\n'.join(header + imports + cls_code + ['']))
